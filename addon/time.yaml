# time.yaml
time:
  - platform: sntp
    id: sntp_time
    timezone: "America/New_York"
    servers:
     - 0.pool.ntp.org
     - 1.pool.ntp.org
     - 2.pool.ntp.org

    on_time_sync:
      then:
        - lvgl.label.update:
            id: display_time
            text: !lambda |-
              static char time_buf[6];
              auto now = id(sntp_time).now();
              if (now.is_valid()) {
                snprintf(time_buf, sizeof(time_buf), "%02d:%02d", now.hour, now.minute);
                return std::string(time_buf);
              }
              return std::string("--:--");
        - lvgl.label.update:
            id: time_label
            text: !lambda |-
              static char time_buf[6];
              auto now = id(sntp_time).now();
              if (now.is_valid()) {
                snprintf(time_buf, sizeof(time_buf), "%02d:%02d", now.hour, now.minute);
                return std::string(time_buf);
              }
              return std::string("--:--");
        - lvgl.label.update:
            id: weekday_label
            text: !lambda |-
              static const char* weekdays[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
              auto now = id(sntp_time).now();
              if (now.is_valid()) {
                return weekdays[now.day_of_week - 1];
              } else {
                return "Unknown";
              }
        - lvgl.label.update:
            id: date_label
            text: !lambda |-
              static const char* months[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
              auto now = id(sntp_time).now();
              if (now.is_valid()) {
                char date_buf[30];
                snprintf(date_buf, sizeof(date_buf), "%02d. %s %d", now.day_of_month, months[now.month - 1], now.year);
                return std::string(date_buf);
              } else {
                return "--.--.----";
              }

    on_time:
      - seconds: 0
        then:
          - lvgl.label.update:
              id: display_time
              text: !lambda |-
                static char time_buf[6];
                auto now = id(sntp_time).now();
                if (now.is_valid()) {
                  snprintf(time_buf, sizeof(time_buf), "%02d:%02d", now.hour, now.minute);
                  return std::string(time_buf);
                }
                return std::string("--:--");
          - lvgl.label.update:
              id: time_label
              text: !lambda |-
                static char time_buf[6];
                auto now = id(sntp_time).now();
                if (now.is_valid()) {
                  snprintf(time_buf, sizeof(time_buf), "%02d:%02d", now.hour, now.minute);
                  return std::string(time_buf);
                }
                return std::string("--:--");

text_sensor:
  - platform: template
    id: esphome_current_weekday_name
    name: "ESPHome Weekday Name"
    internal: true
    update_interval: 60s
    lambda: |-
      auto now = id(sntp_time).now();
      if (now.is_valid()) {
        static const char* weekdays[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
        return std::string(weekdays[now.day_of_week - 1]);
      }
      return std::string("Unknown");
    on_value:
      then:
        - lvgl.label.update:
            id: weekday_label
            text: !lambda return x.c_str();

  - platform: template
    id: esphome_current_date_formatted
    name: "ESPHome Formatted Date"
    internal: true
    update_interval: 60s
    lambda: |-
      auto now = id(sntp_time).now();
      if (now.is_valid()) {
        static const char* months[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
        char date_buf[30];
        snprintf(date_buf, sizeof(date_buf), "%02d. %s %d", now.day_of_month, months[now.month - 1], now.year);
        return std::string(date_buf);
      }
      return std::string("--.--.----");
    on_value:
      then:
        - lvgl.label.update:
            id: date_label
            text: !lambda return x.c_str();
