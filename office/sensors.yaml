globals:
  - id: innen_temp_wert
    type: float
    initial_value: '0.0'
  - id: aussen_temp_wert
    type: float
    initial_value: '0.0'

sensor:
  - platform: homeassistant
    entity_id: sensor.environment_sensor_temperature_sensor
    id: wz_temperature
    on_value:
      then:
        - lambda: |-
            id(innen_temp_wert) = x;
        - script.execute: update_all_temp_displays

  - platform: homeassistant
    entity_id: sensor.aussentemperatur
    id: outdoor_temperature
    on_value:
      then:
        - lambda: |-
            id(aussen_temp_wert) = x;
        - script.execute: update_all_temp_displays

  - platform: wifi_signal
    name: "Wifi Signal Strength Icon"
    id: wifi_signal_sensor
    update_interval: 15s
    entity_category: "diagnostic"
    internal: true
    on_value:
      then:
        - script.execute: update_wifi_icon_display

text_sensor:
  - platform: homeassistant
    id: ha_weather_condition_text
    entity_id: weather.forecast_home
    attribute: condition
    on_value:
      then:
        - lvgl.label.update:
            id: weather_condition_label
            text: !lambda return x.c_str();

  - platform: homeassistant
    id: ha_weather_icon_code
    entity_id: sensor.wetter_ui_icon_code_v2 # ANPASSEN an deine HA Template-Sensor ID
    on_value:
      then:
        - lvgl.label.update:
            id: weather_main_icon
            text: !lambda return x.c_str();

time:
  - platform: homeassistant
    id: esptime
    on_time:
      - minutes: "*"
        then:
          - script.execute: update_all_time_displays

binary_sensor:
  - platform: homeassistant
    id: office_scene_evening
    entity_id: binary_sensor.office_scene_evening
    publish_initial_state: true
    on_state:
      then:
        lvgl.widget.update:
          id: office_scene_evening_button
          state:
            checked: !lambda return x;
  - platform: homeassistant
    id: office_scene_dimmed
    entity_id: binary_sensor.office_scene_dimmed
    publish_initial_state: true
    on_state:
      then:
        lvgl.widget.update:
          id: office_scene_dimmed_button
          state:
            checked: !lambda return x;
  - platform: homeassistant
    id: office_scene_desk_call
    entity_id: binary_sensor.office_scene_desk_call
    publish_initial_state: true
    on_state:
      then:
        lvgl.widget.update:
          id: office_scene_calls_button
          state:
            checked: !lambda return x;
  - platform: homeassistant
    id: office_scene_features
    entity_id: binary_sensor.office_scene_features
    publish_initial_state: true
    on_state:
      then:
        lvgl.widget.update:
          id: office_scene_features_button
          state:
            checked: !lambda return x;
  - platform: homeassistant
    id: office_3d_printer_power
    entity_id: switch.office_3d_printer_power
    publish_initial_state: true
    on_state:
      then:
        lvgl.widget.update:
          id: printer_power_button
          state:
            checked: !lambda return x;
  - platform: homeassistant
    id: wz_lichtschalter
    entity_id: light.wz_lichtschalter
    publish_initial_state: true
    on_state:
      then:
        lvgl.widget.update:
          id: wz_button
          state:
            checked: !lambda return x;
  - platform: homeassistant
    id: wohnzimmer_stehlampe_status
    entity_id: light.wohnzimmer_stehlampe
    publish_initial_state: true
    on_state:
      - lvgl.widget.update:
          id: wohnzimmer_stehlampe_button
          state:
            checked: !lambda return x;
      - if:
          condition:
            lambda: return x;
          then:
            - lvgl.label.update:
                id: wohnzimmer_stehlampe_icon
                text: $lightbulb
          else:
            - lvgl.label.update:
                id: wohnzimmer_stehlampe_icon
                text: $lightbulb_off

script:
  - id: update_wifi_icon_display
    then:
      - lvgl.label.update:
          id: wifi_icon_label # Dieses Label ist im top_layer
          text: !lambda |-
            if (!network::is_connected()) { return std::string("\U000F092E"); }
            if (id(wifi_signal_sensor).has_state()) {
              float rssi = id(wifi_signal_sensor).state;
              if (rssi >= -55) { return std::string("\U000F091F"); }
              else if (rssi >= -65) { return std::string("\U000F091E"); }
              else if (rssi >= -75) { return std::string("\U000F091D"); }
              else if (rssi >= -85) { return std::string("\U000F091C"); }
              else { return std::string("\U000F091B"); }
            }
            return std::string("\U000F092E");

  - id: update_all_temp_displays
    then:
      - lvgl.label.update:
          id: indoor_temp_value_label # Wetterseite
          text:
            format: "%.1f째C"
            args: ['id(innen_temp_wert)']
      - lvgl.label.update:
          id: indoor_temp_icon_label # Wetterseite
          text: $temp_indoor_icon
      - lvgl.label.update:
          id: outdoor_temp_value_label # Wetterseite
          text:
            format: "%.1f째C"
            args: ['id(aussen_temp_wert)']
      - lvgl.label.update:
          id: outdoor_temp_icon_label # Wetterseite
          text: $temp_outdoor_icon
      - lvgl.label.update:
          id: header_temperatures # Header der zweiten Seite
          text:
            format: "%d째/%d째"
            args:
              - '(int)round(id(innen_temp_wert))'
              - '(int)round(id(aussen_temp_wert))'

  - id: update_all_time_displays
    then:
      - lvgl.label.update:
          id: time_date_label # Wetterseite
          text: !lambda |-
            auto time = id(esptime).now();
            return strftime_P(PSTR("%A, %d. %B %H:%M"), time.to_c_tm());
      - lvgl.label.update:
          id: header_display_time # Header der zweiten Seite
          text: !lambda |-
            auto time = id(esptime).now();
            return strftime_P(PSTR("%H:%M"), time.to_c_tm());
