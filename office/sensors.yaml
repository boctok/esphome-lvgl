# sensors.yaml
globals:
  - id: innen_temp_wert
    type: float
    initial_value: '0.0'
  - id: aussen_temp_wert
    type: float
    initial_value: '0.0'
  - id: flur_temp_wert
    type: float
    initial_value: '0.0'
  - id: flur_humidity_wert
    type: float
    initial_value: '0.0'

sensor:
  - platform: homeassistant
    entity_id: sensor.environment_sensor_temperature_sensor
    id: wz_temperature
    on_value:
      then:
        - lambda: |-
            id(innen_temp_wert) = x;
        - script.execute: update_temperatur_anzeige
  - platform: homeassistant
    entity_id: sensor.aussentemperatur
    id: outdoor_temperature
    on_value:
      then:
        - lambda: |-
            id(aussen_temp_wert) = x;
        - script.execute: update_temperatur_anzeige
  - platform: homeassistant
    entity_id: sensor.flur_temperatur_temperature
    id: flur_temperature_sensor
    on_value:
      then:
        - lambda: |-
            id(flur_temp_wert) = x;
        - script.execute: update_temperatur_anzeige
  - platform: homeassistant
    entity_id: sensor.flur_temperatur_humidity
    id: flur_humidity_sensor
    on_value:
      then:
        - lambda: |-
            id(flur_humidity_wert) = x;
        - script.execute: update_temperatur_anzeige
  - platform: wifi_signal
    name: "Wifi Signal Strength Icon"
    id: wifi_signal_sensor
    update_interval: 15s
    entity_category: "diagnostic"
    internal: true
    on_value:
      then:
        - script.execute: update_wifi_icon_display

text_sensor:
  - platform: homeassistant
    id: ha_display_data_sensor
    entity_id: sensor.esphome_display_data
    on_value:
      then:
        - script.execute: update_ui_from_json

script:
  - id: update_temperatur_anzeige
    then:
      - lvgl.label.update:
          id: temperatures
          text:
            format: "%d° / %d°"
            args:
              - '(int)round(id(innen_temp_wert))'
              - '(int)round(id(aussen_temp_wert))'
      - lvgl.label.update:
          id: outdoor_temp_large_label
          text: !lambda |-
            char temp_buf[20];
            float temp_val = id(aussen_temp_wert);
            if (isnan(temp_val)) { return std::string("--.-°C"); }
            snprintf(temp_buf, sizeof(temp_buf), "%.1f°C", temp_val);
            return std::string(temp_buf);
      - lvgl.label.update:
          id: flur_temp_value_label
          text: !lambda |-
            char temp_buf[20];
            float temp_val = id(flur_temp_wert);
            if (isnan(temp_val)) { return std::string("--.-°C"); }
            snprintf(temp_buf, sizeof(temp_buf), "%.1f°C", temp_val);
            return std::string(temp_buf);
      - lvgl.label.update:
          id: flur_humidity_value_label
          text: !lambda |-
            char temp_buf[20];
            float temp_val = id(flur_humidity_wert);
            if (isnan(temp_val)) { return std::string("--.-%%"); }
            snprintf(temp_buf, sizeof(temp_buf), "%.1f%%", temp_val);
            return std::string(temp_buf);
  - id: update_wifi_icon_display
    then:
      - lvgl.label.update:
          id: wifi_icon_label
          text: !lambda |-
            if (!network::is_connected()) { return std::string("\U000F092E"); }
            if (id(wifi_signal_sensor).has_state()) {
              float rssi = id(wifi_signal_sensor).state;
              if (rssi >= -55) { return std::string("\U000F091F"); }
              else if (rssi >= -65) { return std::string("\U000F091E"); }
              else if (rssi >= -75) { return std::string("\U000F091D"); }
              else if (rssi >= -85) { return std::string("\U000F091C"); }
              else { return std::string("\U000F091B"); }
            }
            return std::string("\U000F092E");
  - id: update_ui_from_json
    then:
      - lambda: |-
          #include "esphome/components/json/json_util.h"
          #include <string>
          #include <map>
          auto data = esphome::json::parse_json(id(ha_display_data_sensor).state);
          if (!data.success()) {
            ESP_LOGW("json", "JSON parsing failed for UI update.");
            return;
          }
          JsonObject root = data.get_data();
          bool wz_licht_on = root["wz_lichtschalter"].as<std::string>() == "on";
          id(wz_lichtschalter_button).set_checked(wz_licht_on);
          id(wz_lichtschalter_icon).set_text(wz_licht_on ? $ceiling_group_on : $ceiling_group_off);
          id(wz_button).set_checked(wz_licht_on);
          id(wz_button_icon).set_text(wz_licht_on ? $lightbulb : $lightbulb_off);
          bool wz_steh_on = root["wz_stehlampe"].as<std::string>() == "on";
          id(wohnzimmer_stehlampe_button).set_checked(wz_steh_on);
          id(wohnzimmer_stehlampe_icon).set_text(wz_steh_on ? $floor_lamp_on : $floor_lamp_off);
          bool wz_decke_on = root["wz_decke"].as<std::string>() == "on";
          id(wohnzimmer_deckenlampe_button).set_checked(wz_decke_on);
          id(wohnzimmer_deckenlampe_icon).set_text(wz_decke_on ? $ceiling_on : $ceiling_off);
          bool ez_tisch_on = root["ez_tisch"].as<std::string>() == "on";
          id(esszimmertisch_button).set_checked(ez_tisch_on);
          id(esszimmertisch_icon).set_text(ez_tisch_on ? $ceiling_on : $ceiling_off);
          bool ez_steh_on = root["ez_stehlampe"].as<std::string>() == "on";
          id(esszimmer_stehlampe_button).set_checked(ez_steh_on);
          id(esszimmer_stehlampe_icon).set_text(ez_steh_on ? $floor_lamp_variant_on : $floor_lamp_variant_off);
          std::string cover_state = root["cover_wz_links"];
          id(wz_blind_open_button).set_checked(cover_state == "open");
          id(wz_blind_close_button).set_checked(cover_state == "closed");
          id(weather_description).set_text(root["wetter_zustand"].as<const char*>());
          static const std::map<std::string, lv_img_dsc_t*> icon_map = {
            {"icon_png_clear_night", id(icon_png_clear_night)},
            {"icon_png_cloudy", id(icon_png_cloudy)},
            {"icon_png_exceptional", id(icon_png_exceptional)},
            {"icon_png_fog", id(icon_png_fog)},
            {"icon_png_hail", id(icon_png_hail)},
            {"icon_png_lightning", id(icon_png_lightning)},
            {"icon_png_lightning_rainy", id(icon_png_lightning_rainy)},
            {"icon_png_partlycloudy", id(icon_png_partlycloudy)},
            {"icon_png_pouring", id(icon_png_pouring)},
            {"icon_png_rainy", id(icon_png_rainy)},
            {"icon_png_snowy", id(icon_png_snowy)},
            {"icon_png_snowy_rainy", id(icon_png_snowy_rainy)},
            {"icon_png_sunny", id(icon_png_sunny)},
            {"icon_png_windy", id(icon_png_windy)},
            {"icon_png_windy_variant", id(icon_png_windy_variant)}
          };
          auto it = icon_map.find(root["wetter_icon"].as<std::string>());
          if (it != icon_map.end()) {
            id(lvgl_weather_image_widget).set_src(it->second);
          }
