# sensors.yaml
globals:
  - id: innen_temp_wert
    type: float
    initial_value: '0.0'
  - id: aussen_temp_wert
    type: float
    initial_value: '0.0'
  - id: flur_temp_wert
    type: float
    initial_value: '0.0'
  - id: flur_humidity_wert
    type: float
    initial_value: '0.0'

sensor:
  - platform: homeassistant
    entity_id: sensor.environment_sensor_temperature_sensor
    id: wz_temperature
    on_value:
      then:
        - lambda: |-
            id(innen_temp_wert) = x;
        - script.execute: update_temperatur_anzeige
  - platform: homeassistant
    entity_id: sensor.aussentemperatur
    id: outdoor_temperature
    on_value:
      then:
        - lambda: |-
            id(aussen_temp_wert) = x;
        - script.execute: update_temperatur_anzeige
  - platform: homeassistant
    entity_id: sensor.flur_temperatur_temperature
    id: flur_temperature_sensor
    on_value:
      then:
        - lambda: |-
            id(flur_temp_wert) = x;
        - script.execute: update_temperatur_anzeige
  - platform: homeassistant
    entity_id: sensor.flur_temperatur_humidity
    id: flur_humidity_sensor
    on_value:
      then:
        - lambda: |-
            id(flur_humidity_wert) = x;
        - script.execute: update_temperatur_anzeige
  - platform: wifi_signal
    name: "Wifi Signal Strength Icon"
    id: wifi_signal_sensor
    update_interval: 15s
    entity_category: "diagnostic"
    internal: true
    on_value:
      then:
        - script.execute: update_wifi_icon_display

text_sensor:
  - platform: homeassistant
    id: ha_display_data_sensor
    entity_id: sensor.esphome_display_data
    attribute: json_data
    on_value:
      then:
        - script.execute: update_ui_from_json

script:
  - id: update_temperatur_anzeige
    then:
      - lvgl.label.update:
          id: temperatures
          text:
            format: "%d° / %d°"
            args:
              - '(int)round(id(innen_temp_wert))'
              - '(int)round(id(aussen_temp_wert))'
      - lvgl.label.update:
          id: outdoor_temp_large_label
          text: !lambda |-
            char temp_buf[20];
            float temp_val = id(aussen_temp_wert);
            if (isnan(temp_val)) { return std::string("--.-°C"); }
            snprintf(temp_buf, sizeof(temp_buf), "%.1f°C", temp_val);
            return std::string(temp_buf);
      - lvgl.label.update:
          id: flur_temp_value_label
          text: !lambda |-
            char temp_buf[20];
            float temp_val = id(flur_temp_wert);
            if (isnan(temp_val)) { return std::string("--.-°C"); }
            snprintf(temp_buf, sizeof(temp_buf), "%.1f°C", temp_val);
            return std::string(temp_buf);
      - lvgl.label.update:
          id: flur_humidity_value_label
          text: !lambda |-
            char temp_buf[20];
            float temp_val = id(flur_humidity_wert);
            if (isnan(temp_val)) { return std::string("--.-%%"); }
            snprintf(temp_buf, sizeof(temp_buf), "%.1f%%", temp_val);
            return std::string(temp_buf);
  - id: update_wifi_icon_display
    then:
      - lvgl.label.update:
          id: wifi_icon_label
          text: !lambda |-
            if (!network::is_connected()) { return std::string("\U000F092E"); }
            if (id(wifi_signal_sensor).has_state()) {
              float rssi = id(wifi_signal_sensor).state;
              if (rssi >= -55) { return std::string("\U000F091F"); }
              else if (rssi >= -65) { return std::string("\U000F091E"); }
              else if (rssi >= -75) { return std::string("\U000F091D"); }
              else if (rssi >= -85) { return std::string("\U000F091C"); }
              else { return std::string("\U000F091B"); }
            }
            return std::string("\U000F092E");
  - id: update_ui_from_json
    mode: parallel
    then:
      - if:
          condition:
            lambda: |-
              bool result = false;
              json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool {
                if (root.containsKey("wz_lichtschalter")) {
                  result = root["wz_lichtschalter"].as<std::string>() == "on";
                }
                return true;
              });
              return result;
          then:
            - lvgl.widget.update: { id: wz_lichtschalter_button, state: { checked: true } }
            - lvgl.label.update: { id: wz_lichtschalter_icon, text: $ceiling_group_on }
            - lvgl.widget.update: { id: wz_button, state: { checked: true } }
            - lvgl.label.update: { id: wz_button_icon, text: $lightbulb }
          else:
            - lvgl.widget.update: { id: wz_lichtschalter_button, state: { checked: false } }
            - lvgl.label.update: { id: wz_lichtschalter_icon, text: $ceiling_group_off }
            - lvgl.widget.update: { id: wz_button, state: { checked: false } }
            - lvgl.label.update: { id: wz_button_icon, text: $lightbulb_off }
      - if:
          condition:
            lambda: |-
              bool result = false;
              json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool {
                if (root.containsKey("wz_stehlampe")) {
                  result = root["wz_stehlampe"].as<std::string>() == "on";
                }
                return true;
              });
              return result;
          then:
            - lvgl.widget.update: { id: wohnzimmer_stehlampe_button, state: { checked: true } }
            - lvgl.label.update: { id: wohnzimmer_stehlampe_icon, text: $floor_lamp_on }
          else:
            - lvgl.widget.update: { id: wohnzimmer_stehlampe_button, state: { checked: false } }
            - lvgl.label.update: { id: wohnzimmer_stehlampe_icon, text: $floor_lamp_off }
      - if:
          condition:
            lambda: |-
              bool result = false;
              json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool {
                if (root.containsKey("wz_decke")) {
                  result = root["wz_decke"].as<std::string>() == "on";
                }
                return true;
              });
              return result;
          then:
            - lvgl.widget.update: { id: wohnzimmer_deckenlampe_button, state: { checked: true } }
            - lvgl.label.update: { id: wohnzimmer_deckenlampe_icon, text: $ceiling_on }
          else:
            - lvgl.widget.update: { id: wohnzimmer_deckenlampe_button, state: { checked: false } }
            - lvgl.label.update: { id: wohnzimmer_deckenlampe_icon, text: $ceiling_off }
      - if:
          condition:
            lambda: |-
              bool result = false;
              json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool {
                if (root.containsKey("ez_tisch")) {
                  result = root["ez_tisch"].as<std::string>() == "on";
                }
                return true;
              });
              return result;
          then:
            - lvgl.widget.update: { id: esszimmertisch_button, state: { checked: true } }
            - lvgl.label.update: { id: esszimmertisch_icon, text: $ceiling_on }
          else:
            - lvgl.widget.update: { id: esszimmertisch_button, state: { checked: false } }
            - lvgl.label.update: { id: esszimmertisch_icon, text: $ceiling_off }
      - if:
          condition:
            lambda: |-
              bool result = false;
              json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool {
                if (root.containsKey("ez_stehlampe")) {
                  result = root["ez_stehlampe"].as<std::string>() == "on";
                }
                return true;
              });
              return result;
          then:
            - lvgl.widget.update: { id: esszimmer_stehlampe_button, state: { checked: true } }
            - lvgl.label.update: { id: esszimmer_stehlampe_icon, text: $floor_lamp_variant_on }
          else:
            - lvgl.widget.update: { id: esszimmer_stehlampe_button, state: { checked: false } }
            - lvgl.label.update: { id: esszimmer_stehlampe_icon, text: $floor_lamp_variant_off }
      - if:
          condition:
            lambda: |-
              bool result = false;
              json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool {
                if (root.containsKey("cover_wz_links")) {
                  result = root["cover_wz_links"].as<std::string>() == "open";
                }
                return true;
              });
              return result;
          then:
            - lvgl.widget.update: { id: wz_blind_open_button, state: { checked: true } }
            - lvgl.widget.update: { id: wz_blind_close_button, state: { checked: false } }
          else:
            - if:
                condition:
                  lambda: |-
                    bool result = false;
                    json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool {
                      if (root.containsKey("cover_wz_links")) {
                        result = root["cover_wz_links"].as<std::string>() == "closed";
                      }
                      return true;
                    });
                    return result;
                then:
                  - lvgl.widget.update: { id: wz_blind_open_button, state: { checked: false } }
                  - lvgl.widget.update: { id: wz_blind_close_button, state: { checked: true } }
                else:
                  - lvgl.widget.update: { id: wz_blind_open_button, state: { checked: false } }
                  - lvgl.widget.update: { id: wz_blind_close_button, state: { checked: false } }
      - lvgl.label.update:
          id: weather_description
          text: !lambda |-
            std::string result;
            json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool {
              if (root.containsKey("wetter_zustand")) {
                result = root["wetter_zustand"].as<std::string>();
              }
              return true;
            });
            return result;
      - if:
          condition:
            lambda: |-
              bool r = false; json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool { if(root.containsKey("wetter_icon")) { r = root["wetter_icon"].as<std::string>() == "icon_png_clear_night"; } return true; }); return r;
          then:
            - lvgl.image.update: { id: lvgl_weather_image_widget, src: icon_png_clear_night }
      - if:
          condition:
            lambda: |-
              bool r = false; json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool { if(root.containsKey("wetter_icon")) { r = root["wetter_icon"].as<std::string>() == "icon_png_cloudy"; } return true; }); return r;
          then:
            - lvgl.image.update: { id: lvgl_weather_image_widget, src: icon_png_cloudy }
      - if:
          condition:
            lambda: |-
              bool r = false; json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool { if(root.containsKey("wetter_icon")) { r = root["wetter_icon"].as<std::string>() == "icon_png_exceptional"; } return true; }); return r;
          then:
            - lvgl.image.update: { id: lvgl_weather_image_widget, src: icon_png_exceptional }
      - if:
          condition:
            lambda: |-
              bool r = false; json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool { if(root.containsKey("wetter_icon")) { r = root["wetter_icon"].as<std::string>() == "icon_png_fog"; } return true; }); return r;
          then:
            - lvgl.image.update: { id: lvgl_weather_image_widget, src: icon_png_fog }
      - if:
          condition:
            lambda: |-
              bool r = false; json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool { if(root.containsKey("wetter_icon")) { r = root["wetter_icon"].as<std::string>() == "icon_png_hail"; } return true; }); return r;
          then:
            - lvgl.image.update: { id: lvgl_weather_image_widget, src: icon_png_hail }
      - if:
          condition:
            lambda: |-
              bool r = false; json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool { if(root.containsKey("wetter_icon")) { r = root["wetter_icon"].as<std::string>() == "icon_png_lightning"; } return true; }); return r;
          then:
            - lvgl.image.update: { id: lvgl_weather_image_widget, src: icon_png_lightning }
      - if:
          condition:
            lambda: |-
              bool r = false; json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool { if(root.containsKey("wetter_icon")) { r = root["wetter_icon"].as<std::string>() == "icon_png_lightning_rainy"; } return true; }); return r;
          then:
            - lvgl.image.update: { id: lvgl_weather_image_widget, src: icon_png_lightning_rainy }
      - if:
          condition:
            lambda: |-
              bool r = false; json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool { if(root.containsKey("wetter_icon")) { r = root["wetter_icon"].as<std::string>() == "icon_png_partlycloudy"; } return true; }); return r;
          then:
            - lvgl.image.update: { id: lvgl_weather_image_widget, src: icon_png_partlycloudy }
      - if:
          condition:
            lambda: |-
              bool r = false; json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool { if(root.containsKey("wetter_icon")) { r = root["wetter_icon"].as<std::string>() == "icon_png_pouring"; } return true; }); return r;
          then:
            - lvgl.image.update: { id: lvgl_weather_image_widget, src: icon_png_pouring }
      - if:
          condition:
            lambda: |-
              bool r = false; json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool { if(root.containsKey("wetter_icon")) { r = root["wetter_icon"].as<std::string>() == "icon_png_rainy"; } return true; }); return r;
          then:
            - lvgl.image.update: { id: lvgl_weather_image_widget, src: icon_png_rainy }
      - if:
          condition:
            lambda: |-
              bool r = false; json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool { if(root.containsKey("wetter_icon")) { r = root["wetter_icon"].as<std::string>() == "icon_png_snowy"; } return true; }); return r;
          then:
            - lvgl.image.update: { id: lvgl_weather_image_widget, src: icon_png_snowy }
      - if:
          condition:
            lambda: |-
              bool r = false; json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool { if(root.containsKey("wetter_icon")) { r = root["wetter_icon"].as<std::string>() == "icon_png_snowy_rainy"; } return true; }); return r;
          then:
            - lvgl.image.update: { id: lvgl_weather_image_widget, src: icon_png_snowy_rainy }
      - if:
          condition:
            lambda: |-
              bool r = false; json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool { if(root.containsKey("wetter_icon")) { r = root["wetter_icon"].as<std::string>() == "icon_png_sunny"; } return true; }); return r;
          then:
            - lvgl.image.update: { id: lvgl_weather_image_widget, src: icon_png_sunny }
      - if:
          condition:
            lambda: |-
              bool r = false; json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool { if(root.containsKey("wetter_icon")) { r = root["wetter_icon"].as<std::string>() == "icon_png_windy"; } return true; }); return r;
          then:
            - lvgl.image.update: { id: lvgl_weather_image_widget, src: icon_png_windy }
      - if:
          condition:
            lambda: |-
              bool r = false; json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool { if(root.containsKey("wetter_icon")) { r = root["wetter_icon"].as<std::string>() == "icon_png_windy_variant"; } return true; }); return r;
          then:
            - lvgl.image.update: { id: lvgl_weather_image_widget, src: icon_png_windy_variant }
      - lvgl.label.update:
          id: main_page_media_title
          text: !lambda |-
            std::string result;
            json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool {
              if (root.containsKey("media_title")) {
                result = root["media_title"].as<std::string>();
              }
              return true;
            });
            return result;
      - lvgl.label.update:
          id: main_page_media_artist
          text: !lambda |-
            std::string result;
            json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool {
              if (root.containsKey("media_artist")) {
                result = root["media_artist"].as<std::string>();
              }
              return true;
            });
            return result;
      - if:
          condition:
            lambda: |-
              bool result = false;
              json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool {
                if (root.containsKey("media_state")) {
                  auto state = root["media_state"].as<std::string>();
                  result = (state == "playing" || state == "on");
                }
                return true;
              });
              return result;
          then:
            - lvgl.label.update: { id: main_page_media_play_pause_icon, text: $pause }
            - lvgl.widget.update: { id: main_page_media_container, bg_color: $button_on_color }
          else:
            - lvgl.label.update: { id: main_page_media_play_pause_icon, text: $play }
            - lvgl.widget.update: { id: main_page_media_container, bg_color: $button_control_color }
      - if:
          condition:
            lambda: |-
              bool result = false;
              json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool {
                if (root.containsKey("media_image_url")) {
                  result = !root["media_image_url"].as<std::string>().empty();
                }
                return true;
              });
              return result;
          then:
            - online_image.set_url:
                id: album_art_online_image
                url: !lambda |-
                  std::string img_url;
                  json::parse_json(id(ha_display_data_sensor).state, [&](JsonObject root) -> bool {
                    if (root.containsKey("media_image_url")) {
                      img_url = root["media_image_url"].as<std::string>();
                    }
                    return true;
                  });
                  return "http://192.168.178.122:8123" + img_url;
            - lvgl.image.update:
                id: main_page_media_image
                src: album_art_online_image
          else:
            - lvgl.image.update:
                id: main_page_media_image
                src: apple_tv_logo_png
