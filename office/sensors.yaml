# sensors.yaml
globals:
  - id: innen_temp_wert
    type: float
    initial_value: '0.0'
  - id: aussen_temp_wert
    type: float
    initial_value: '0.0'

sensor:
  - platform: homeassistant
    entity_id: sensor.environment_sensor_temperature_sensor
    id: wz_temperature
    on_value:
      then:
        - lambda: |-
            id(innen_temp_wert) = x;
        - script.execute: update_temperatur_anzeige

  - platform: homeassistant
    entity_id: sensor.aussentemperatur
    id: outdoor_temperature
    on_value:
      then:
        - lambda: |-
            id(aussen_temp_wert) = x;
        - script.execute: update_temperatur_anzeige

  - platform: wifi_signal
    name: "Wifi Signal Strength Icon"
    id: wifi_signal_sensor
    update_interval: 15s
    entity_category: "diagnostic"
    internal: true
    on_value:
      then:
        - script.execute: update_wifi_icon_display

text_sensor:
  - platform: homeassistant
    id: esphome_wetter_png_icon_id
    entity_id: sensor.wetter_icon # Stellt sicher, dass dieser HA-Sensor die korrekte Bild-ID liefert
    internal: true
    on_value:
      then:
        - if:
            condition:
              lambda: return !x.empty(); # Nur ausführen, wenn der empfangene Icon-Name nicht leer ist
            then:
              - logger.log:
                  format: "Wetter Icon ID von HA: '%s'"
                  args: [x.c_str()]
              - lvgl.image.update:
                  id: lvgl_weather_image_widget # ID des Image-Widgets in lvgl.yaml
                  src: !lambda return x.c_str(); # Übergibt den String der Bild-ID
            else:
              - logger.log: "Wetter Icon ID von HA ist leer, kein Icon-Update."

  - platform: homeassistant
    id: esphome_weather_forecast_home # Liefert den Zustand von weather.forecast_home (z.B. "cloudy")
    entity_id: weather.forecast_home
    internal: true
    on_value: # HINZUGEFÜGT: Aktualisiert das Beschreibungslabel
      then:
        - if:
            condition:
              lambda: return !x.empty(); # Nur ausführen, wenn die Beschreibung nicht leer ist
            then:
              - logger.log:
                  format: "Wetter Forecast State von HA: '%s'"
                  args: [x.c_str()]
              - lvgl.label.update:
                  id: weather_description # ID des Beschreibungs-Labels in lvgl.yaml
                  text: !lambda return x.c_str(); # Setzt den Text auf den Zustand (z.B. "cloudy")
            else:
              - logger.log: "Wetter Forecast State von HA ist leer, kein Beschreibungs-Update."

binary_sensor:
  - platform: homeassistant
    id: office_scene_evening
    entity_id: binary_sensor.office_scene_evening
    publish_initial_state: true
    on_state:
      then:
        lvgl.widget.update:
          id: office_scene_evening_button
          state:
            checked: !lambda return x;

  - platform: homeassistant
    id: office_scene_dimmed
    entity_id: binary_sensor.office_scene_dimmed
    publish_initial_state: true
    on_state:
      then:
        lvgl.widget.update:
          id: office_scene_dimmed_button
          state:
            checked: !lambda return x;

  - platform: homeassistant
    id: office_scene_desk_call
    entity_id: binary_sensor.office_scene_desk_call
    publish_initial_state: true
    on_state:
      then:
        lvgl.widget.update:
          id: office_scene_calls_button
          state:
            checked: !lambda return x;

  - platform: homeassistant
    id: office_scene_features
    entity_id: binary_sensor.office_scene_features
    publish_initial_state: true
    on_state:
      then:
        lvgl.widget.update:
          id: office_scene_features_button
          state:
            checked: !lambda return x;

  - platform: homeassistant
    id: office_3d_printer_power
    entity_id: switch.office_3d_printer_power
    publish_initial_state: true
    on_state:
      then:
        lvgl.widget.update:
          id: printer_power_button
          state:
            checked: !lambda return x;

  - platform: homeassistant
    id: wz_lichtschalter
    entity_id: light.wz_lichtschalter
    publish_initial_state: true
    on_state:
      then:
        lvgl.widget.update:
          id: wz_button
          state:
            checked: !lambda return x;

  - platform: homeassistant
    id: wohnzimmer_stehlampe_status
    entity_id: light.wohnzimmer_stehlampe
    publish_initial_state: true
    on_state:
      - lvgl.widget.update:
          id: wohnzimmer_stehlampe_button
          state:
            checked: !lambda return x;
      - if:
          condition:
            lambda: return x;
          then:
            - lvgl.label.update:
                id: wohnzimmer_stehlampe_icon
                text: $lightbulb
          else:
            - lvgl.label.update:
                id: wohnzimmer_stehlampe_icon
                text: $lightbulb_off       

script:
  - id: update_temperatur_anzeige
    then:
      # Header-Temperaturen aktualisieren
      - lvgl.label.update:
          id: temperatures # ID aus lvgl-7.yaml (top_layer)
          text:
            format: "%d° / %d°"
            args:
              - '(int)round(id(innen_temp_wert))'
              - '(int)round(id(aussen_temp_wert))'
      # Wetterseiten-Temperaturen aktualisieren
      - lvgl.label.update:
          id: outdoor_temperature_label # ID aus lvgl-7.yaml (weather_page)
          text: !lambda |-
            char temp_buf[20];
            snprintf(temp_buf, sizeof(temp_buf), "Out: %.0f°C", id(aussen_temp_wert));
            return temp_buf;
      - lvgl.label.update:
          id: indoor_temperature_label # ID aus lvgl-7.yaml (weather_page)
          text: !lambda |-
            char temp_buf[20];
            snprintf(temp_buf, sizeof(temp_buf), "Home: %.0f°C", id(innen_temp_wert));
            return temp_buf;

  - id: update_wifi_icon_display
    then:
      - lvgl.label.update:
          id: wifi_icon_label
          text: !lambda |-
            if (!network::is_connected()) {
              return std::string("\U000F092E"); 
            }
            if (id(wifi_signal_sensor).has_state()) {
              float rssi = id(wifi_signal_sensor).state;
              if (rssi >= -55) { return std::string("\U000F091F"); } // Stärkstes Signal
              else if (rssi >= -65) { return std::string("\U000F091E"); }
              else if (rssi >= -75) { return std::string("\U000F091D"); }
              else if (rssi >= -85) { return std::string("\U000F091C"); }
              else { return std::string("\U000F091B"); } // Schwächstes Signal
            }
            return std::string("\U000F092E"); 
